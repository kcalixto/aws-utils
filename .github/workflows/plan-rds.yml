name: Plan Deploy

on:
  pull_request:
    branches:
      - main

env:
  TF_CLOUD_ORGANIZATION: "aws-utils"
  TF_API_TOKEN: "${{ secrets.TF_AWS_UTILS_TOKEN }}"
  TF_WORKSPACE: "null"
  CONFIG_DIRECTORY: "null"

jobs:
  terraform:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    permissions:
        contents: read
        pull-requests: write
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - uses: Stockopedia/action-get-changed-files@v1
        id: get_changed
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          foldersOnly: true
          format: json


      - name: dir check
        run: |
          echo "CONFIG_DIRECTORY=${{steps.get_changed.outputs.changed[0]}}" >> $GITHUB_OUTPUT
          echo ${{steps.get_changed.outputs.changed[0]}}
          echo ${{steps.get_changed.outputs.changed[1]}}

          if [[ ${{steps.get_changed.outputs.changed}} == *"rds"* ]]; then
            echo "CONFIG_DIRECTORY=templates/rds" >> $GITHUB_OUTPUT
            echo "TF_WORKSPACE=aws-utils-rds" >> $GITHUB_OUTPUT

          elif [[ ${{steps.get_changed.outputs.changed}} == *"vpc"* ]]; then
            echo "CONFIG_DIRECTORY=vpc" >> $GITHUB_OUTPUT
            echo "TF_WORKSPACE=aws-utils-vpc" >> $GITHUB_OUTPUT
          fi
      
      - name: env check
        run: |
          if [["${{ env.CONFIG_DIRECTORY }}" == "null" || "${{ env.TF_WORKSPACE }}" == "null" ]]; then
            echo "CONFIG_DIRECTORY or TF_WORKSPACE is null"
            echo ${{ env.CONFIG_DIRECTORY }}
            echo ${{ env.TF_WORKSPACE }}

            exit 1
          fi
      
      - name: log
        run: |
          echo ${{ env.CONFIG_DIRECTORY }}
          echo ${{ env.TF_WORKSPACE }}
      
      # - name: Upload Configuration
      #   uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
      #   id: plan-upload
      #   with:
      #     workspace: ${{ env.TF_WORKSPACE }}
      #     directory: ${{ env.CONFIG_DIRECTORY }}
      #     speculative: true
        
      # - name: Create Plan Run
      #   uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
      #   id: plan-run
      #   with:
      #     workspace: ${{ env.TF_WORKSPACE }}
      #     configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
      #     plan_only: true

      # - name: Get Plan Output
      #   uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
      #   id: plan-output
      #   with:
      #     plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      # - name: Update PR
      #   uses: actions/github-script@v6
      #   id: plan-comment
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       // 1. Retrieve existing bot comments for the PR
      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #       });
      #       const botComment = comments.find(comment => {
      #         return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
      #       });
      #       const output = `#### Terraform Cloud Plan Output
      #           \`\`\`
      #           Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
      #           \`\`\`

      #           ![Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
      #           `;
      #       // 3. Delete previous comment so PR timeline makes sense
      #       if (botComment) {
      #         github.rest.issues.deleteComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           comment_id: botComment.id,
      #         });
      #       }
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       });